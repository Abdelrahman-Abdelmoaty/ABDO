// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String  @id @default(cuid())
  name     String
  email    String  @unique
  image    String?
  password String
  cart     Cart?
}

// model VerificationToken {
//   id      String   @id @default(cuid())
//   email   String
//   token   String   @unique
//   expires DateTime

//   @@unique([email, token])
// }

model Product {
  id            String         @id @default(cuid())
  name          String
  price         Float
  description   String?
  category      String?
  productColors ProductColor[]
  productSizes  ProductSize[]
  stock         Int
  createdAt     DateTime       @default(now())

  @@unique([id, name])
}

model ProductColor {
  id        String   @id @default(cuid())
  colorId   String
  color     Color    @relation(fields: [colorId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  images    String[]
  stock     Int

  @@unique([id])
}

model Color {
  id           String         @id @default(cuid())
  name         String
  hexCode      String
  productColor ProductColor[]

  @@unique([id, name])
}

model ProductSize {
  id        String  @id @default(cuid())
  sizeId    String
  size      Size    @relation(fields: [sizeId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  stock     Int

  @@unique([id])
}

model Size {
  id          String        @id @default(cuid())
  name        String
  productSize ProductSize[]

  @@unique([id, name])
}

model CartItem {
  id       String @id @default(cuid())
  size     String
  quantity Int
  cartId   String @unique
  cart     Cart   @relation(fields: [cartId], references: [id])
}

model Cart {
  id       String     @id @default(cuid())
  userId   String     @unique
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  products CartItem[]
}
